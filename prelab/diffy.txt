--- producer_consumer.c	2017-08-31 11:10:17.448759790 -0400
+++ tmp	2017-09-01 17:10:21.999321078 -0400
@@ -68,11 +68,12 @@
 
   /* Join threads, handle return values where appropriate */
 
-  result = pthread_join(producer_thread, NULL);
-  if (0 != result) {
-    fprintf(stderr, "Failed to join producer thread: %s\n", strerror(result));
-    pthread_exit(NULL);
-  }
+  /*
+	Bug #2: Threads that have been detached are not joinable; invoking the join
+	method here results in undefined behavior, this must be removed. In the end
+	we must only wait for the consumer thread to finish as it waits on the
+	producer threads to finish anyways.
+  */
 
   result = pthread_join(consumer_thread, &thread_return);
   if (0 != result) {
@@ -136,8 +137,20 @@
   }
 
   /* Decrement the number of producer threads running, then return */
+  /*
+	Bug #1: To modify the g_num_prod global variable, the mutex lock must first
+	be acquired, otherwise this may result in wrongful termination of the loop
+    in the consumer function.
+  */ 
+  pthread_mutex_lock(&g_num_prod_lock);
   --g_num_prod;
-  return (void*) 0;
+  pthread_mutex_unlock(&g_num_prod_lock);
+
+  /*
+	Bug #4: Thread shouldn't return anything, rather they should call the exit
+	function as so.
+  */
+  pthread_exit(0);
 }
 
 
@@ -179,9 +192,16 @@
       pthread_mutex_unlock(&queue_p->lock);
       sched_yield();
     }
+
+    /*
+      Bug #3: Mutex locks should be re-acquired before checking for loop
+	  conditions on the next iteration.
+    */
+    pthread_mutex_lock(&queue_p->lock);
+    pthread_mutex_lock(&g_num_prod_lock);
   }
   pthread_mutex_unlock(&g_num_prod_lock);
   pthread_mutex_unlock(&queue_p->lock);
 
-  return (void*) count;
+  pthread_exit(0);
 }
